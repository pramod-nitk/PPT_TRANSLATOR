# -*- coding: utf-8 -*-
"""convert_ppt

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1x1cRIfXwWJqX3V7Q-esZJn-Nrr7x-NTu
"""

!pip install python-pptx googletrans==4.0.0-rc1 langcodes

from pptx import Presentation
from pptx.enum.shapes import MSO_SHAPE_TYPE
from pptx.enum.text import MSO_AUTO_SIZE

from langcodes import Language
from googletrans import Translator

import os

translator = Translator()

RTL_LANGS = {"ar", "fa", "ur", "he"}

def normalize_lang(lang: str) -> str:
    try:
        return Language.get(lang).to_tag().lower()
    except Exception:
        return lang.lower()

def set_textframe_autofit(tf):
    try:
        tf.word_wrap = True
        tf.auto_size = MSO_AUTO_SIZE.TEXT_TO_FIT_SHAPE
    except Exception:
        pass

def iter_all_text_objects(shapes):
    for shape in shapes:
        if shape.shape_type == MSO_SHAPE_TYPE.GROUP:
            yield from iter_all_text_objects(shape.shapes)
            continue

        if getattr(shape, "has_text_frame", False):
            yield ("text_frame", shape.text_frame)

        if getattr(shape, "has_table", False):
            table = shape.table
            for r in table.rows:
                for c in r.cells:
                    if c.text_frame:
                        yield ("table_cell", c)

def collect_runs_in_textframe(tf):
    pairs = []
    for p in tf.paragraphs:
        for r in p.runs:
            pairs.append((p, r))
    return pairs

import time
from googletrans import Translator

translator = Translator()

def safe_translate(text, dest="fr", retries=3, delay=2):
    if not text.strip():
        return text
    for i in range(retries):
        try:
            result = translator.translate(text, dest=dest)
            if result and result.text:
                return result.text
        except Exception as e:
            print(f"Error: {e} (retry {i+1}/{retries})")
            time.sleep(delay)
    return text

def translate_batch(texts, target_lang):
    return [safe_translate(t, dest=target_lang) for t in texts]

def translate_textframe(tf, target_lang_code: str):
    set_textframe_autofit(tf)
    pairs = collect_runs_in_textframe(tf)
    original_texts = [r.text or "" for (_, r) in pairs]

    translated = translate_batch(original_texts, target_lang_code)

    for (p, r), new_text in zip(pairs, translated):
        r.text = new_text

def translate_presentation(input_path: str, output_path: str, target_lang_code: str):
    prs = Presentation(input_path)

    for slide in prs.slides:
        for kind, obj in iter_all_text_objects(slide.shapes):
            if kind == "text_frame":
                translate_textframe(obj, target_lang_code)
            elif kind == "table_cell":
                translate_textframe(obj.text_frame, target_lang_code)

    prs.save(output_path)

input_pptx = "/content/presentation-7dnGp2Syni9XqW3XWaqW.pptx"

languages = ["fr", "de", "es", "hi", "ja", "zh-cn", "ru", "ar", "pt", "it"]

out_dir = "/content/translated_pptx"
os.makedirs(out_dir, exist_ok=True)

for lang in languages:
    safe_lang = normalize_lang(lang).replace("/", "-")
    out_path = os.path.join(out_dir, f"deck_{safe_lang}.pptx")
    translate_presentation(input_pptx, out_path, safe_lang)
    print("âœ” Saved:", out_path)

